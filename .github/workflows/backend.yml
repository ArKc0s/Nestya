name: Backend Release & Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyze Code with SonarQube
    runs-on: ['self-hosted', 'Linux', 'X64']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd backend
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=nestya-backend

  build-and-deploy:
    name: Build, Push and Deploy Release
    needs: analyze
    runs-on: ['self-hosted', 'Linux', 'X64']
    steps:
      - uses: actions/checkout@v4

      - name: Run Database Migration
        # On utilise setup-java ici car c'est un nouveau job
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - run: |
          cd backend
          mvn flyway:migrate -Dflyway.url=${{ secrets.FLYWAY_URL }} -Dflyway.user=${{ secrets.FLYWAY_USER }} -Dflyway.password=${{ secrets.FLYWAY_PASSWORD }}

      - name: Set Release Version as Tag
        id: vars
        run: echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Login to registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USER }} --password-stdin

      - name: Build and Push image
        run: |
          docker build -t ${{ secrets.REGISTRY_URL }}/nestya-backend:${{ steps.vars.outputs.TAG }} backend
          docker tag ${{ secrets.REGISTRY_URL }}/nestya-backend:${{ steps.vars.outputs.TAG }} ${{ secrets.REGISTRY_URL }}/nestya-backend:latest
          docker push ${{ secrets.REGISTRY_URL }}/nestya-backend --all-tags

      - name: Deploy (SSH to App VM)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.APP_SSH_HOST }}
          username: ${{ secrets.APP_SSH_USER }}
          key: ${{ secrets.APP_SSH_KEY }}
          passphrase: ${{ secrets.APP_SSH_PASSPHRASE }}
          script: |
            cd /srv/nestya
            sed -i "s/^BACKEND_TAG=.*/BACKEND_TAG=${{ steps.vars.outputs.TAG }}/" .env
            docker compose pull backend
            docker compose up -d --force-recreate --no-deps backend
            docker compose ps
